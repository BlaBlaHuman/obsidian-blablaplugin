/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BlaBlaPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/Settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  removeBrackets: true,
  removeEmphasis: false,
  removeTags: false,
  removeComments: false,
  migrateSettingsFromBuildinTemplates: true,
  templateFolder: void 0,
  dateFormat: "YYYY-MM-DD",
  timeFormat: "HH:mm",
  deleteTODOs: false
};
var BlaBlaSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.containerEl.createEl("h1", { text: "Template expanding" });
    new import_obsidian.Setting(containerEl).setName("Migrate settings from buildin `Templates` plugin").setDesc("If enabled, template folder is taken from buildin `Templates` settings").addToggle((toggle) => toggle.setValue(this.plugin.settings.migrateSettingsFromBuildinTemplates).onChange(async (value) => {
      this.plugin.settings.migrateSettingsFromBuildinTemplates = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Path to templates").setDesc("Path to your templates folder").addText((text) => {
      var _a;
      return text.setPlaceholder("Enter your path").setValue((_a = this.plugin.settings.templateFolder) != null ? _a : "").onChange(async (value) => {
        const trimmedValue = value.trim();
        this.plugin.settings.templateFolder = trimmedValue == "" ? DEFAULT_SETTINGS.templateFolder : trimmedValue;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Date format").setDesc("{{date}} in the template file will be replaced by this value").addText((text) => text.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async (value) => {
      this.plugin.settings.dateFormat = value == "" ? DEFAULT_SETTINGS.dateFormat : value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Time format").setDesc("{{time}} in the template file will be replaced by this value").addText((text) => text.setPlaceholder("HH:mm").setValue(this.plugin.settings.timeFormat).onChange(async (value) => {
      this.plugin.settings.timeFormat = value == "" ? DEFAULT_SETTINGS.timeFormat : value;
      await this.plugin.saveSettings();
    }));
    this.containerEl.createEl("h1", { text: "Copy plain Markdown" });
    new import_obsidian.Setting(containerEl).setName("Remove Wikilink brackets").setDesc("If enabled, removes wikilink brackets from copied text.").addToggle((toggle) => toggle.setValue(this.plugin.settings.removeBrackets).onChange(async (value) => {
      this.plugin.settings.removeBrackets = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove text emphasis").setDesc("If enabled, removes highlights.").addToggle((toggle) => toggle.setValue(this.plugin.settings.removeEmphasis).onChange(async (value) => {
      this.plugin.settings.removeEmphasis = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove hashtags").setDesc("If enabled, removes text immediately after a hashtag.").addToggle((toggle) => toggle.setValue(this.plugin.settings.removeTags).onChange(async (value) => {
      this.plugin.settings.removeTags = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove comments").setDesc("If enabled, removes commented text.").addToggle((toggle) => toggle.setValue(this.plugin.settings.removeComments).onChange(async (value) => {
      this.plugin.settings.removeComments = value;
      await this.plugin.saveSettings();
    }));
    this.containerEl.createEl("h1", { text: "TODO lists" });
    new import_obsidian.Setting(containerEl).setName("Remove completed TODOs").setDesc("If enabled, removes completed TODOs").addToggle((toggle) => toggle.setValue(this.plugin.settings.deleteTODOs).onChange(async (value) => {
      this.plugin.settings.deleteTODOs = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/DailyNotes.ts
var import_obsidian2 = require("obsidian");

// src/MigrateSettings.ts
function migrateTemplatesFolder(plugin) {
  try {
    const obsidianTemplatesPlugin = plugin.app.internalPlugins.getPluginById("templates");
    if (!obsidianTemplatesPlugin) {
      return void 0;
    }
    const obsidianTemplatesSettings = obsidianTemplatesPlugin.instance.options;
    if (obsidianTemplatesSettings.folder) {
      return obsidianTemplatesSettings.folder;
    }
  } catch (error) {
  }
  return void 0;
}
function migrateDailyNotesSettings(plugin) {
  var _a, _b;
  try {
    const dailyNotesPlugin = plugin.app.internalPlugins.getPluginById("daily-notes");
    if (!dailyNotesPlugin) {
      return void 0;
    }
    const dailyNotesPluginSettings = dailyNotesPlugin.instance.options;
    return {
      dateFormat: dailyNotesPluginSettings.format,
      newFileLocation: (_a = dailyNotesPluginSettings.folder) == null ? void 0 : _a.trim(),
      templateFileLocation: (_b = dailyNotesPluginSettings.template) == null ? void 0 : _b.trim()
    };
  } catch (error) {
  }
  return void 0;
}

// src/Utils.ts
async function getExpandedTemplate(template, plugin) {
  const moment = window.moment;
  const text = (await plugin.app.vault.read(template)).replace(/{{date}}/gi, moment().format(plugin.settings.dateFormat)).replace(/{{date\s*\:\s*(.+)}}/gi, (match, format) => {
    return moment().format(format);
  }).replace(/{{date\s*\+\s*(\d+)}}/gi, (match, number) => {
    const daysToAdd = parseInt(number, 10);
    const newDate = moment().add(daysToAdd, "days").format(plugin.settings.dateFormat);
    return newDate;
  }).replace(/{{date\s*-\s*(\d+)}}/gi, (match, number) => {
    const daysToAdd = parseInt(number, 10);
    const newDate = moment().add(-daysToAdd, "days").format(plugin.settings.dateFormat);
    return newDate;
  }).replace(/{{time}}/gi, moment().format(plugin.settings.timeFormat)).replace(/{{title}}/gi, template.basename);
  return text;
}

// src/DailyNotes.ts
var path = __toESM(require("path"));
var DailyNotesSuggestModal = class extends import_obsidian2.SuggestModal {
  constructor(app, commands) {
    super(app);
    this.commands = commands;
  }
  getSuggestions(query) {
    return this.commands.filter(
      (it) => it.name.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(command, el) {
    el.createEl("div", { text: command.name });
  }
  onChooseSuggestion(command, _evt) {
    command.callback ? command.callback() : console.error("Daily notes callback was not found");
  }
};
async function openOrCreateNote(plugin, daysShift = 0) {
  const dailyNotesSettings = migrateDailyNotesSettings(plugin);
  const moment = window.moment;
  if (!dailyNotesSettings) {
    new import_obsidian2.Notice("`Daily notes` plugin is not available");
    return;
  }
  let dailyNotesFolder = plugin.app.vault.getAbstractFileByPath(dailyNotesSettings.newFileLocation);
  if (!dailyNotesFolder) {
    dailyNotesFolder = await plugin.app.vault.createFolder(dailyNotesSettings.newFileLocation);
  }
  const noteName = moment().add(daysShift, "days").format(dailyNotesSettings.dateFormat);
  const notePath = path.join(dailyNotesSettings.newFileLocation, `${noteName}.md`);
  let file = plugin.app.vault.getAbstractFileByPath(notePath);
  if (!file) {
    const templateFile = plugin.app.vault.getAbstractFileByPath(`${dailyNotesSettings.templateFileLocation}.md`);
    if (!templateFile)
      return;
    const templateText = await getExpandedTemplate(templateFile, plugin);
    file = await plugin.app.vault.create(notePath, templateText);
  }
  await plugin.app.workspace.openLinkText(file == null ? void 0 : file.path, "", true, { active: true });
}

// src/Templates.ts
var import_obsidian3 = require("obsidian");
var TemplatesSuggestModal = class extends import_obsidian3.SuggestModal {
  constructor(app, suggestions, callback) {
    super(app);
    this.suggestions = suggestions;
    this.callback = callback;
  }
  getSuggestions(query) {
    return this.suggestions.filter(
      (it) => it.path.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(template, el) {
    el.createEl("div", { text: template.basename });
    el.createEl("small", { text: template.path });
  }
  onChooseSuggestion(template, _evt) {
    this.callback(template);
  }
};
function expandTemplate(plugin, editor) {
  let templateFolderPath;
  if (plugin.settings.migrateSettingsFromBuildinTemplates) {
    let internalTemplateFolder = migrateTemplatesFolder(plugin);
    if (internalTemplateFolder == void 0) {
      new import_obsidian3.Notice("Builtin plugin `Templates` is not available");
      return;
    }
    templateFolderPath = internalTemplateFolder;
  } else {
    let localTemplateFolder = plugin.settings.templateFolder;
    if (localTemplateFolder == void 0) {
      new import_obsidian3.Notice("Templates folder is not specified");
      return;
    }
    templateFolderPath = localTemplateFolder;
  }
  const templateName = editor.getSelection().trim();
  const files = plugin.app.vault.getMarkdownFiles().filter(
    (file) => file.path.startsWith(templateFolderPath)
  );
  const insertTemplate = async (template) => {
    const templateText = await getExpandedTemplate(template, plugin);
    editor.replaceSelection(templateText);
  };
  if (templateName == "") {
    const modal = new TemplatesSuggestModal(plugin.app, files, insertTemplate);
    modal.open();
    return;
  }
  let templatesCollection = files.filter((it) => it.basename === templateName);
  if (!templatesCollection.length) {
    new import_obsidian3.Notice(`Template ${templateName} was not found`);
    return;
  }
  if (templatesCollection.length == 1) {
    let template = templatesCollection.first();
    if (!template)
      return;
    insertTemplate(template);
  } else {
    const modal = new TemplatesSuggestModal(plugin.app, templatesCollection, insertTemplate);
    modal.open();
  }
}

// src/CopyPasteImprovements.ts
function copyStructuralFormatting(editor) {
  let textToCopy = editor.getSelection();
  if (textToCopy == "") {
    textToCopy = editor.getValue();
  }
  textToCopy = textToCopy.replace(/<(.|\n)*?>/g, "");
  var blob = new Blob([textToCopy], { type: "text/plain" });
  const data = [new ClipboardItem({
    ["text/plain"]: blob
  })];
  navigator.clipboard.write(data);
}
async function copyPlainMarkdown(plugin, editor) {
  let text = editor.getSelection();
  if (text == "") {
    text = editor.getValue();
  }
  text = text.replace(/---.*?---/g, "");
  text = text.replace(/<(.|\n)*?>/g, "");
  text = text.replace(/\[\^\w+\]/g, "");
  if (plugin.settings.removeBrackets) {
    text = text.replace(/\[\[(.*?)\]\]/g, "$1");
  }
  if (plugin.settings.removeEmphasis) {
    text = text.replace(/==/g, "");
  }
  if (plugin.settings.removeTags) {
    text = text.replace(/#\w+/g, "");
  }
  if (plugin.settings.removeComments) {
    text = text.replace(/%%.+%%/g, "");
  }
  var blob = new Blob([text], { type: "text/plain" });
  const data = [new ClipboardItem({
    ["text/plain"]: blob
  })];
  navigator.clipboard.write(data);
}

// main.ts
var BlaBlaPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.commands = [];
  }
  async onload() {
    await this.loadSettings();
    const expandTemplateCommand = this.addCommand({
      id: "expand-template",
      name: "Expand template",
      editorCallback: (editor) => expandTemplate(this, editor)
    });
    this.commands.push(expandTemplateCommand);
    const copyPlaiMarkdownCommand = this.addCommand({
      id: "copy-plain-markdown",
      name: "Copy plain markdown",
      editorCallback: (editor) => copyPlainMarkdown(this, editor)
    });
    this.commands.push(copyPlaiMarkdownCommand);
    const copyStructuralFormattingCommand = this.addCommand({
      id: "copy-structural-formatting",
      name: "Copy structural formatting only",
      editorCallback: (editor) => copyStructuralFormatting(editor)
    });
    this.commands.push(copyStructuralFormattingCommand);
    const openTomorrowNoteCommand = this.addCommand({
      id: "open-note-tomorrow",
      name: "Open tomorrow`s note",
      callback: () => {
        openOrCreateNote(this, 1);
      }
    });
    this.commands.push(openTomorrowNoteCommand);
    const openYesterdayNoteCommand = this.addCommand({
      id: "open-note-yesterday",
      name: "Open yesterday`s note",
      callback: () => {
        openOrCreateNote(this, -1);
      }
    });
    this.commands.push(openYesterdayNoteCommand);
    const openTodayNoteCommand = this.addCommand({
      id: "open-note-today",
      name: "Open today`s note",
      callback: () => {
        openOrCreateNote(this);
      }
    });
    this.commands.push(openTodayNoteCommand);
    this.addRibbonIcon("calendar", "Open daily note", () => {
      const modal = new DailyNotesSuggestModal(this.app, this.commands.filter((it) => {
        return it.id.startsWith(`${this.manifest.id}:open-note`);
      }));
      modal.open();
    });
    const removeTODOsCallback = () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
      if (!activeView)
        return;
      const editor = activeView.editor;
      const noteFile = this.app.workspace.getActiveFile();
      if (!noteFile)
        return;
      let text = editor.getValue();
      let found = false;
      text = text.replace(/\-\s\[\x\]\s([^\n]+)/g, (_match, _cap) => {
        found = true;
        return "";
      });
      if (!found)
        return;
      editor.setValue(text);
    };
    const removeTODOsTimeout = 2e3;
    let inputTimeout;
    if (this.settings.deleteTODOs)
      inputTimeout = setTimeout(removeTODOsCallback, removeTODOsTimeout);
    this.registerEvent(this.app.workspace.on("editor-change", (_editor, _info) => {
      if (!this.settings.deleteTODOs)
        return;
      clearTimeout(inputTimeout);
      inputTimeout = setTimeout(removeTODOsCallback, removeTODOsTimeout);
    }));
    const removeEmptyLines = this.addCommand({
      id: "remove-empty-lines",
      name: "Remove empty lines",
      editorCallback: (editor) => {
        const noteFile = this.app.workspace.getActiveFile();
        if (!noteFile)
          return;
        let text = editor.getValue();
        let found = false;
        text = text.replace(/^\s*[\r\n]*/g, (_match, _cap) => {
          found = true;
          return "";
        });
        text = text.replace(/(\r?\n){3,}/g, (_match, _cap) => {
          found = true;
          return "\n\n";
        });
        if (!found)
          return;
        editor.setValue(text);
      }
    });
    this.commands.push(removeEmptyLines);
    this.addSettingTab(new BlaBlaSettingTab(this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
